# HG changeset patch
# User James Cheng <jacheng@mozilla.com>

Bug 1037329 - Part 2, enable SystemUpdate API on b2g. r=fabrice

---
 b2g/app/b2g.js                        |   6 ++
 b2g/chrome/content/shell.js           |   1 +
 b2g/components/B2GComponents.manifest |   1 +
 b2g/components/UpdatePrompt.js        | 163 +++++++++++++++++++++++++++++++++-
 b2g/installer/package-manifest.in     |   3 +
 5 files changed, 170 insertions(+), 4 deletions(-)

diff --git a/b2g/app/b2g.js b/b2g/app/b2g.js
index 194578d..ffbd37c 100644
--- a/b2g/app/b2g.js
+++ b/b2g/app/b2g.js
@@ -595,16 +595,19 @@ pref("app.update.socket.retryTimeout", 30000);
 // Max of 20 consecutive retries (total 10 minutes) before giving up and marking
 // the update download as failed.
 // Note: Offline errors will always retry when the network comes online.
 pref("app.update.socket.maxErrors", 20);
 
 // Enable update logging for now, to diagnose growing pains in the
 // field.
 pref("app.update.log", true);
+
+// SystemUpdate API
+pref("dom.system_update.active", "@mozilla.org/updates/update-prompt;1");
 #else
 // Explicitly disable the shutdown watchdog.  It's enabled by default.
 // When the updater is disabled, we want to know about shutdown hangs.
 pref("shutdown.watchdog.timeoutSecs", -1);
 #endif
 
 // Allow webapps update checking
 pref("webapps.update.enabled", true);
@@ -1074,16 +1077,19 @@ pref("identity.fxaccounts.enabled", true);
 // Mobile Identity API.
 pref("services.mobileid.server.uri", "https://msisdn.services.mozilla.com");
 
 // Enable mapped array buffer.
 #ifndef XP_WIN
 pref("dom.mapped_arraybuffer.enabled", true);
 #endif
 
+// SystemUpdate API
+pref("dom.system_update.enabled", true);
+
 // UDPSocket API
 pref("dom.udpsocket.enabled", true);
 
 // Enable TV Manager API
 pref("dom.tv.enabled", true);
 
 pref("dom.mozSettings.SettingsDB.debug.enabled", true);
 pref("dom.mozSettings.SettingsManager.debug.enabled", true);
diff --git a/b2g/chrome/content/shell.js b/b2g/chrome/content/shell.js
index 196f945..2810741 100644
--- a/b2g/chrome/content/shell.js
+++ b/b2g/chrome/content/shell.js
@@ -11,16 +11,17 @@ Cu.import('resource://gre/modules/ActivitiesService.jsm');
 Cu.import('resource://gre/modules/NotificationDB.jsm');
 Cu.import('resource://gre/modules/Payment.jsm');
 Cu.import("resource://gre/modules/AppsUtils.jsm");
 Cu.import('resource://gre/modules/UserAgentOverrides.jsm');
 Cu.import('resource://gre/modules/Keyboard.jsm');
 Cu.import('resource://gre/modules/ErrorPage.jsm');
 Cu.import('resource://gre/modules/AlertsHelper.jsm');
 Cu.import('resource://gre/modules/RequestSyncService.jsm');
+Cu.import('resource://gre/modules/SystemUpdateService.jsm');
 #ifdef MOZ_WIDGET_GONK
 Cu.import('resource://gre/modules/NetworkStatsService.jsm');
 Cu.import('resource://gre/modules/ResourceStatsService.jsm');
 #endif
 
 // Identity
 Cu.import('resource://gre/modules/SignInToWebsite.jsm');
 SignInToWebsiteController.init();
diff --git a/b2g/components/B2GComponents.manifest b/b2g/components/B2GComponents.manifest
index 4423cd6..541aa00 100644
--- a/b2g/components/B2GComponents.manifest
+++ b/b2g/components/B2GComponents.manifest
@@ -8,16 +8,17 @@ contract @mozilla.org/system-alerts-service;1 {fe33c107-82a4-41d6-8c64-5353267e0
 # ContentPermissionPrompt.js
 component {8c719f03-afe0-4aac-91ff-6c215895d467} ContentPermissionPrompt.js
 contract @mozilla.org/content-permission/prompt;1 {8c719f03-afe0-4aac-91ff-6c215895d467}
 
 #ifdef MOZ_UPDATER
 # UpdatePrompt.js
 component {88b3eb21-d072-4e3b-886d-f89d8c49fe59} UpdatePrompt.js
 contract @mozilla.org/updates/update-prompt;1 {88b3eb21-d072-4e3b-886d-f89d8c49fe59}
+category system-update-provider MozillaProvider @mozilla.org/updates/update-prompt;1,{88b3eb21-d072-4e3b-886d-f89d8c49fe59}
 #endif
 
 # DirectoryProvider.js
 component {9181eb7c-6f87-11e1-90b1-4f59d80dd2e5} DirectoryProvider.js
 contract @mozilla.org/b2g/directory-provider;1 {9181eb7c-6f87-11e1-90b1-4f59d80dd2e5}
 category xpcom-directory-providers b2g-directory-provider @mozilla.org/b2g/directory-provider;1
 
 # ActivitiesGlue.js
diff --git a/b2g/components/UpdatePrompt.js b/b2g/components/UpdatePrompt.js
index fee312f..6870f45 100644
--- a/b2g/components/UpdatePrompt.js
+++ b/b2g/components/UpdatePrompt.js
@@ -79,42 +79,60 @@ UpdateCheckListener.prototype = {
       // see, even if a newer update is available.
       this._updatePrompt.setUpdateStatus("active-update");
       this._updatePrompt.showUpdateAvailable(Services.um.activeUpdate);
       return;
     }
 
     if (updateCount == 0) {
       this._updatePrompt.setUpdateStatus("no-updates");
+
+      if (this._updatePrompt._systemUpdateListener) {
+        this._updatePrompt._systemUpdateListener.onError("no-updates");
+      }
+
       return;
     }
 
     let update = Services.aus.selectUpdate(updates, updateCount);
     if (!update) {
       this._updatePrompt.setUpdateStatus("already-latest-version");
+
+      if (this._updatePrompt._systemUpdateListener) {
+        this._updatePrompt._systemUpdateListener.onError("already-latest-version");
+      }
+
       return;
     }
 
     this._updatePrompt.setUpdateStatus("check-complete");
     this._updatePrompt.showUpdateAvailable(update);
   },
 
   onError: function UCL_onError(request, update) {
     // nsIUpdate uses a signed integer for errorCode while any platform errors
     // require all 32 bits.
     let errorCode = update.errorCode >>> 0;
     let isNSError = (errorCode >>> 31) == 1;
+    let errorMsg = "check-error-";
 
     if (errorCode == NETWORK_ERROR_OFFLINE) {
-      this._updatePrompt.setUpdateStatus("retry-when-online");
+      errorMsg = "retry-when-online";
+      this._updatePrompt.setUpdateStatus(errorMsg);
     } else if (isNSError) {
-      this._updatePrompt.setUpdateStatus("check-error-" + errorCode);
+      errorMsg = "check-error-" + errorCode;
+      this._updatePrompt.setUpdateStatus(errorMsg);
     } else if (errorCode > HTTP_ERROR_OFFSET) {
       let httpErrorCode = errorCode - HTTP_ERROR_OFFSET;
-      this._updatePrompt.setUpdateStatus("check-error-http-" + httpErrorCode);
+      errorMsg = "check-error-http-" + httpErrorCode;
+      this._updatePrompt.setUpdateStatus(errorMsg);
+    }
+
+    if (this._updatePrompt._systemUpdateListener) {
+      this._updatePrompt._systemUpdateListener.onError(errorMsg);
     }
 
     Services.aus.QueryInterface(Ci.nsIUpdateCheckListener);
     Services.aus.onError(request, update);
   }
 };
 
 function UpdatePrompt() {
@@ -124,23 +142,103 @@ function UpdatePrompt() {
 }
 
 UpdatePrompt.prototype = {
   classID: Components.ID("{88b3eb21-d072-4e3b-886d-f89d8c49fe59}"),
   QueryInterface: XPCOMUtils.generateQI([Ci.nsIUpdatePrompt,
                                          Ci.nsIUpdateCheckListener,
                                          Ci.nsIRequestObserver,
                                          Ci.nsIProgressEventSink,
-                                         Ci.nsIObserver]),
+                                         Ci.nsIObserver,
+                                         Ci.nsISystemUpdateProvider]),
   _xpcom_factory: XPCOMUtils.generateSingletonFactory(UpdatePrompt),
 
   _update: null,
   _applyPromptTimer: null,
   _waitingForIdle: false,
   _updateCheckListner: null,
+  _systemUpdateListener: null,
+  _availableParameters: {
+    "deviceinfo.last_updated": null,
+    "gecko.updateStatus": null,
+    "app.update.channel": null,
+    "app.update.interval": null,
+    "app.update.url": null,
+  },
+  _pendingUpdateAvailablePackageInfo: null,
+  _isPendingUpdateReady: false,
+
+  // nsISystemUpdateProvider
+  checkForUpdate: function() {
+    this.forceUpdateCheck();
+  },
+
+  startDownload: function() {
+    this.downloadUpdate(this._update);
+  },
+
+  stopDownload: function() {
+    this.handleDownloadCancel();
+  },
+
+  applyUpdate: function() {
+    this.handleApplyPromptResult({result: "restart"});
+  },
+
+  setParameter: function(aName, aValue) {
+    if (!this._availableParameters.hasOwnProperty(aName)) {
+      return false;
+    }
+
+    this._availableParameters[aName] = aValue;
+
+    switch (aName) {
+      case "app.update.channel":
+      case "app.update.url":
+        Services.prefs.setCharPref(aName, aValue);
+        break;
+      case "app.update.interval":
+        Services.prefs.setIntPref(aName, parseInt(aValue, 10));
+        break;
+    }
+
+    return true;
+  },
+
+  getParameter: function(aName) {
+    if (!this._availableParameters.hasOwnProperty(aName)) {
+      return null;
+    }
+
+    return this._availableParameters[aName];
+  },
+
+  setListener: function(aListener) {
+    this._systemUpdateListener = aListener;
+
+    // If an update is available or ready, trigger the event right away at this point.
+    if (this._pendingUpdateAvailablePackageInfo) {
+      this._systemUpdateListener.onUpdateAvailable(this._pendingUpdateAvailablePackageInfo.type,
+                                             this._pendingUpdateAvailablePackageInfo.version,
+                                             this._pendingUpdateAvailablePackageInfo.description,
+                                             this._pendingUpdateAvailablePackageInfo.buildDate,
+                                             this._pendingUpdateAvailablePackageInfo.size);
+      // Set null when the listener is attached.
+      this._pendingUpdateAvailablePackageInfo = null;
+    }
+
+    if (this._isPendingUpdateReady) {
+      this._systemUpdateListener.onUpdateReady();
+      this._isPendingUpdateReady = false;
+    }
+  },
+
+  unsetListener: function(aListener) {
+    this._systemUpdateListener = null;
+  },
 
   get applyPromptTimeout() {
     return Services.prefs.getIntPref(PREF_APPLY_PROMPT_TIMEOUT);
   },
 
   get applyIdleTimeout() {
     return Services.prefs.getIntPref(PREF_APPLY_IDLE_TIMEOUT);
   },
@@ -152,24 +250,61 @@ UpdatePrompt.prototype = {
   // nsIUpdatePrompt
 
   // FIXME/bug 737601: we should have users opt-in to downloading
   // updates when on a billed pipe.  Initially, opt-in for 3g, but
   // that doesn't cover all cases.
   checkForUpdates: function UP_checkForUpdates() { },
 
   showUpdateAvailable: function UP_showUpdateAvailable(aUpdate) {
+    let packageInfo = {};
+    packageInfo.version = aUpdate.displayVersion;
+    packageInfo.description = aUpdate.statusText;
+    packageInfo.buildDate = aUpdate.buildID;
+
+    let patch = aUpdate.selectedPatch;
+    if (!patch && aUpdate.patchCount > 0) {
+      // For now we just check the first patch to get size information if a
+      // patch hasn't been selected yet.
+      patch = aUpdate.getPatchAt(0);
+    }
+
+    if (patch) {
+      packageInfo.size = patch.size;
+      packageInfo.type = patch.type;
+    } else {
+      log("Warning: no patches available in update");
+    }
+
+    this._pendingUpdateAvailablePackageInfo = packageInfo;
+
+    if (this._systemUpdateListener) {
+      this._systemUpdateListener.onUpdateAvailable(packageInfo.type,
+                                             packageInfo.version,
+                                             packageInfo.description,
+                                             packageInfo.buildDate,
+                                             packageInfo.size);
+      // Set null since the event is fired.
+      this._pendingUpdateAvailablePackageInfo = null;
+    }
+
     if (!this.sendUpdateEvent("update-available", aUpdate)) {
 
       log("Unable to prompt for available update, forcing download");
       this.downloadUpdate(aUpdate);
     }
   },
 
   showUpdateDownloaded: function UP_showUpdateDownloaded(aUpdate, aBackground) {
+    if (this._systemUpdateListener) {
+      this._systemUpdateListener.onUpdateReady();
+    } else {
+      this._isPendingUpdateReady = true;
+    }
+
     // The update has been downloaded and staged. We send the update-downloaded
     // event right away. After the user has been idle for a while, we send the
     // update-prompt-restart event, increasing the chances that we can apply the
     // update quietly without user intervention.
     this.sendUpdateEvent("update-downloaded", aUpdate);
 
     if (Services.idle.idleTime >= this.applyIdleTimeout) {
       this.showApplyPrompt(aUpdate);
@@ -183,22 +318,28 @@ UpdatePrompt.prototype = {
 
     this._update = aUpdate;
     this.waitForIdle();
   },
 
   showUpdateError: function UP_showUpdateError(aUpdate) {
     log("Update error, state: " + aUpdate.state + ", errorCode: " +
         aUpdate.errorCode);
+    if (this._systemUpdateListener) {
+      this._systemUpdateListener.onError("update-error: " + aUpdate.errorCode + " " + aUpdate.statusText);
+    }
+
     this.sendUpdateEvent("update-error", aUpdate);
     this.setUpdateStatus(aUpdate.statusText);
   },
 
   showUpdateHistory: function UP_showUpdateHistory(aParent) { },
   showUpdateInstalled: function UP_showUpdateInstalled() {
+    this.setParameter("deviceinfo.last_updated", Date.now());
+
     if (useSettings()) {
       let lock = Services.settings.createLock();
       lock.set("deviceinfo.last_updated", Date.now(), null, null);
     }
   },
 
   // Custom functions
 
@@ -208,25 +349,35 @@ UpdatePrompt.prototype = {
     }
 
     this._waitingForIdle = true;
     Services.idle.addIdleObserver(this, this.applyIdleTimeout / 1000);
     Services.obs.addObserver(this, "quit-application", false);
   },
 
   setUpdateStatus: function UP_setUpdateStatus(aStatus) {
+     this.setParameter("gecko.updateStatus", aStatus);
+
      if (useSettings()) {
        log("Setting gecko.updateStatus: " + aStatus);
 
        let lock = Services.settings.createLock();
        lock.set("gecko.updateStatus", aStatus, null);
      }
   },
 
   showApplyPrompt: function UP_showApplyPrompt(aUpdate) {
+    // Notify update package is ready to apply
+    if (this._systemUpdateListener) {
+      this._systemUpdateListener.onUpdateReady();
+    } else {
+      // Set the flag to true and fire the onUpdateReady event when the listener is attached.
+      this._isPendingUpdateReady = true;
+    }
+
     if (!this.sendUpdateEvent("update-prompt-apply", aUpdate)) {
       log("Unable to prompt, forcing restart");
       this.restartProcess();
       return;
     }
 
 #ifdef MOZ_B2G_RIL
     let window = Services.wm.getMostRecentWindow("navigator:browser");
@@ -576,16 +727,20 @@ UpdatePrompt.prototype = {
       paused: paused
     });
   },
 
   // nsIProgressEventSink
 
   onProgress: function UP_onProgress(aRequest, aContext, aProgress,
                                      aProgressMax) {
+    if (this._systemUpdateListener) {
+      this._systemUpdateListener.onProgress(aProgress, aProgressMax);
+    }
+
     if (aProgress == aProgressMax) {
       // The update.mar validation done by onStopRequest may take
       // a while before the onStopRequest callback is made, so stop
       // the timer now.
       this.stopWatchdogTimer();
     } else {
       this.touchWatchdogTimer();
     }
diff --git a/b2g/installer/package-manifest.in b/b2g/installer/package-manifest.in
index cb94a01..f6a028b 100644
--- a/b2g/installer/package-manifest.in
+++ b/b2g/installer/package-manifest.in
@@ -632,16 +632,19 @@
 ; InputMethod API
 @BINPATH@/components/MozKeyboard.js
 @BINPATH@/components/InputMethod.manifest
 
 @BINPATH@/components/EngineeringMode.manifest
 @BINPATH@/components/EngineeringModeAPI.js
 @BINPATH@/components/EngineeringModeService.js
 
+@BINPATH@/components/SystemUpdate.manifest
+@BINPATH@/components/SystemUpdateManager.js
+
 #ifdef MOZ_DEBUG
 @BINPATH@/components/TestInterfaceJS.js
 @BINPATH@/components/TestInterfaceJS.manifest
 #endif
 
 ; Modules
 @BINPATH@/modules/*
 

