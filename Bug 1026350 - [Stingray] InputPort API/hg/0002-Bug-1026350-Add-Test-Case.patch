# HG changeset patch
# User James Cheng <jacheng@mozilla.com>
# Date 1425661541 -28800
#      Sat Mar 07 01:05:41 2015 +0800
# Node ID b5456a4bb9665d1744956c21dbedf3a1ca92dc4b
# Parent  10b6992e4fdd5ab2b8a18230f2e1c1e3323c2be0
[PATCH 2/2] Bug 1026350 - Add Test Case

---
 dom/inputport/moz.build                            |  6 +-
 dom/inputport/test/mochitest/mochitest.ini         |  4 ++
 .../mochitest/test_inputport_connection_event.html | 72 ++++++++++++++++++++++
 .../mochitest/test_inputport_get_inputports.html   | 64 +++++++++++++++++++
 dom/inputport/test/xpcshell/test_inputport_data.js | 61 ++++++++++++++++++
 dom/inputport/test/xpcshell/xpcshell.ini           |  5 ++
 6 files changed, 211 insertions(+), 1 deletion(-)
 create mode 100644 dom/inputport/test/mochitest/mochitest.ini
 create mode 100644 dom/inputport/test/mochitest/test_inputport_connection_event.html
 create mode 100644 dom/inputport/test/mochitest/test_inputport_get_inputports.html
 create mode 100644 dom/inputport/test/xpcshell/test_inputport_data.js
 create mode 100644 dom/inputport/test/xpcshell/xpcshell.ini

diff --git a/dom/inputport/moz.build b/dom/inputport/moz.build
--- a/dom/inputport/moz.build
+++ b/dom/inputport/moz.build
@@ -35,13 +35,17 @@ UNIFIED_SOURCES += [
 ]
 
 XPIDL_SOURCES += [
     'nsIInputPortService.idl',
 ]
 
 XPIDL_MODULE = 'dom_inputport'
 
+MOCHITEST_MANIFESTS += ['test/mochitest/mochitest.ini']
+
+XPCSHELL_TESTS_MANIFESTS += ['test/xpcshell/xpcshell.ini']
+
 include('/ipc/chromium/chromium-config.mozbuild')
 
 FINAL_LIBRARY = 'xul'
 
-FAIL_ON_WARNINGS = True
+FAIL_ON_WARNINGS = True
\ No newline at end of file
diff --git a/dom/inputport/test/mochitest/mochitest.ini b/dom/inputport/test/mochitest/mochitest.ini
new file mode 100644
--- /dev/null
+++ b/dom/inputport/test/mochitest/mochitest.ini
@@ -0,0 +1,4 @@
+[DEFAULT]
+
+[test_inputport_get_inputports.html]
+[test_inputport_connection_event.html]
\ No newline at end of file
diff --git a/dom/inputport/test/mochitest/test_inputport_connection_event.html b/dom/inputport/test/mochitest/test_inputport_connection_event.html
new file mode 100644
--- /dev/null
+++ b/dom/inputport/test/mochitest/test_inputport_connection_event.html
@@ -0,0 +1,72 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=1026350
+-->
+<head>
+<meta charset="utf-8">
+<title>Test Inputport Connection Event</title>
+<link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+</head>
+<body>
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1026350">Test Inputport Connection Event
+</a>
+<script type="application/javascript;version=1.8">
+
+'use strict';
+
+SimpleTest.waitForExplicitFinish();
+
+function testInputportConnectionEvent() {
+  return new Promise(function(resolve, reject) {
+    var inputPortMgr = navigator.inputPortManager;
+    inputPortMgr.getInputPorts().then(
+      function(aPorts) {
+        ok(aPorts.length > 0, "Got at least 1 inputport.");
+          var port0 = aPorts[0];
+          var port0_isConnected = port0.connected;
+          port0.onconnect = function(aEvent) {
+            var port = aEvent.target;
+            is(port.id, port0.id, "The inputport ID should be the same");
+            ok(port.connected, "The connected value matches the connect evnet purpose");
+            is(port.connected, !port0_isConnected, "The connected value should change");
+            resolve();
+          }
+          port0.ondisconnect = function (aEvent) {
+            var port = aEvent.target;
+            is(port.id, port0.id, "The inputport ID should be the same");
+            ok(!port.connected, "The connected value matches the disconnect evnet purpose");
+            is(port.connected, !port0_isConnected, "The connected value should change");
+            resolve();
+          }
+      },
+      function(aError) {
+        ok(false, "Fail to get input ports: " + aError);
+        resolve();
+      }
+    );
+  });
+}
+
+function runTest() {
+  ok(navigator.inputPortManager, 'should have navigator.inputPortManager');
+
+  testInputportConnectionEvent()
+  .then(function() {
+    info('test finished');
+    SimpleTest.finish();
+  });
+}
+
+SpecialPowers.pushPrefEnv({"set": [["dom.inputport.enabled", true],
+                                    //to ignore app scope check.
+                                   ["dom.ignore_webidl_scope_checks", true]]}, function() {
+  SpecialPowers.pushPermissions(
+    [{'type': 'inputport', 'allow': true, 'context': document}], runTest);
+});
+
+ </script>
+ </pre>
+ </body>
+ </html>
diff --git a/dom/inputport/test/mochitest/test_inputport_get_inputports.html b/dom/inputport/test/mochitest/test_inputport_get_inputports.html
new file mode 100644
--- /dev/null
+++ b/dom/inputport/test/mochitest/test_inputport_get_inputports.html
@@ -0,0 +1,64 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=1026350
+-->
+<head>
+<meta charset="utf-8">
+<title>Inputport API Test</title>
+<link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+  <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+</head>
+<body>
+<a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1026350">Test Inputport API</a>
+<script type="application/javascript;version=1.8">
+
+'use strict';
+
+SimpleTest.waitForExplicitFinish();
+
+function testGetInputports() {
+  return new Promise(function(resolve, reject) {
+    var inputPortMgr = navigator.inputPortManager;
+    inputPortMgr.getInputPorts().then(
+      function(aPorts) {
+        ok(aPorts.length > 0, "Got at least 1 inputport.");
+        for (var i=0; i < aPorts.length; ++i) {
+          var port = aPorts[i];
+          ok(port instanceof InputPort, "Inputport " + i + " should be in the right type.");
+          ok('id' in port, "Inputport " + i + " should have an ID.");
+          ok('type' in port, "Inputport " + i + " should have a type.");
+          ok('connected' in port, "Inputport " + i + " should have a connected property.");
+          ok(port.stream, "Inputport " + i + " should have non null stream.");
+          resolve();
+        }
+      },
+      function(aError) {
+        ok(false, "Fail to get input ports: " + aError);
+        resolve();
+      }
+    );
+  });
+}
+
+function runTest() {
+  ok(navigator.inputPortManager, 'should have navigator.inputPortManager');
+
+  testGetInputports()
+  .then(function() {
+    info('test finished');
+    SimpleTest.finish();
+  });
+}
+
+SpecialPowers.pushPrefEnv({"set": [["dom.inputport.enabled", true],
+                                    //to ignore app scope check.
+                                   ["dom.ignore_webidl_scope_checks", true]]}, function() {
+  SpecialPowers.pushPermissions(
+    [{'type': 'inputport', 'allow': true, 'context': document}], runTest);
+});
+
+ </script>
+ </pre>
+ </body>
+ </html>
diff --git a/dom/inputport/test/xpcshell/test_inputport_data.js b/dom/inputport/test/xpcshell/test_inputport_data.js
new file mode 100644
--- /dev/null
+++ b/dom/inputport/test/xpcshell/test_inputport_data.js
@@ -0,0 +1,61 @@
+"use strict";
+
+const {classes: Cc, interfaces: Ci, utils: Cu, results: Cr} = Components;
+
+function run_test() {
+  run_next_test();
+}
+
+add_test(function test_valid_inputport_id() {
+  var inputportId = "inputportId";
+
+  var data = Cc["@mozilla.org/inputport/inputportdata;1"].
+             createInstance(Ci.nsIInputPortData);
+  data.id = inputportId;
+
+  equal(data.id, inputportId);
+
+  run_next_test();
+});
+
+add_test(function test_empty_inputport_id() {
+  var data = Cc["@mozilla.org/inputport/inputportdata;1"].
+             createInstance(Ci.nsIInputPortData);
+  Assert.throws(function() {
+    data.id = "";
+  }, /NS_ERROR_ILLEGAL_VALUE/i);
+
+  run_next_test();
+});
+
+add_test(function test_valid_type() {
+  var  inputportType = "hdmi";
+
+  var data = Cc["@mozilla.org/inputport/inputportdata;1"].
+             createInstance(Ci.nsIInputPortData);
+  data.type = inputportType;
+
+  equal(data.type, inputportType);
+
+  run_next_test();
+});
+
+add_test(function test_empty_type() {
+  var data = Cc["@mozilla.org/inputport/inputportdata;1"].
+             createInstance(Ci.nsIInputPortData);
+  Assert.throws(function() {
+    data.type = "";
+  }, /NS_ERROR_ILLEGAL_VALUE/i);
+
+  run_next_test();
+});
+
+add_test(function test_is_connected() {
+  var data = Cc["@mozilla.org/inputport/inputportdata;1"].
+             createInstance(Ci.nsIInputPortData);
+  data.connected = true;
+
+  ok(data.connected);
+
+  run_next_test();
+});
diff --git a/dom/inputport/test/xpcshell/xpcshell.ini b/dom/inputport/test/xpcshell/xpcshell.ini
new file mode 100644
--- /dev/null
+++ b/dom/inputport/test/xpcshell/xpcshell.ini
@@ -0,0 +1,5 @@
+[DEFAULT]
+head =
+tail =
+
+[test_inputport_data.js]
\ No newline at end of file
